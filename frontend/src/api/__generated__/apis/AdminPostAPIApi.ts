/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostUpdateRequest,
  RsDataLong,
  RsDataPageResponsePostSimpleResponse,
  RsDataPostUpdateResponse,
} from '../models/index';
import {
    PostUpdateRequestFromJSON,
    PostUpdateRequestToJSON,
    RsDataLongFromJSON,
    RsDataLongToJSON,
    RsDataPageResponsePostSimpleResponseFromJSON,
    RsDataPageResponsePostSimpleResponseToJSON,
    RsDataPostUpdateResponseFromJSON,
    RsDataPostUpdateResponseToJSON,
} from '../models/index';

export interface DeletePostRequest {
    id: number;
}

export interface GetPostListRequest {
    page?: number;
    size?: number;
    isPublished?: boolean;
}

export interface UpdatePostRequest {
    id: number;
    postUpdateRequest: PostUpdateRequest;
}

/**
 * 
 */
export class AdminPostAPIApi extends runtime.BaseAPI {

    /**
     * 해당 ID의 게시글을 삭제합니다.
     * 게시글 삭제 (관리자용)
     */
    async deletePostRaw(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RsDataLong>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RsDataLongFromJSON(jsonValue));
    }

    /**
     * 해당 ID의 게시글을 삭제합니다.
     * 게시글 삭제 (관리자용)
     */
    async deletePost(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RsDataLong> {
        const response = await this.deletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 전체 게시글을 페이지 단위로 조회합니다. 게시 여부 필터링도 가능합니다.
     * 게시글 목록 조회 (관리자용)
     */
    async getPostListRaw(requestParameters: GetPostListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RsDataPageResponsePostSimpleResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['isPublished'] != null) {
            queryParameters['isPublished'] = requestParameters['isPublished'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RsDataPageResponsePostSimpleResponseFromJSON(jsonValue));
    }

    /**
     * 전체 게시글을 페이지 단위로 조회합니다. 게시 여부 필터링도 가능합니다.
     * 게시글 목록 조회 (관리자용)
     */
    async getPostList(requestParameters: GetPostListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RsDataPageResponsePostSimpleResponse> {
        const response = await this.getPostListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 게시글 제목, 내용, 게시 여부 및 좌석 구역 가격 정보를 수정합니다.
     * 게시글 수정 (관리자용)
     */
    async updatePostRaw(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RsDataPostUpdateResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePost().'
            );
        }

        if (requestParameters['postUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'postUpdateRequest',
                'Required parameter "postUpdateRequest" was null or undefined when calling updatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostUpdateRequestToJSON(requestParameters['postUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RsDataPostUpdateResponseFromJSON(jsonValue));
    }

    /**
     * 게시글 제목, 내용, 게시 여부 및 좌석 구역 가격 정보를 수정합니다.
     * 게시글 수정 (관리자용)
     */
    async updatePost(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RsDataPostUpdateResponse> {
        const response = await this.updatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
