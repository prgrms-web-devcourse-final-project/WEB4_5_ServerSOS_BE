/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type {
  PostReviewCreateRequest,
  PostReviewUpdateRequest,
  RsDataListPostReviewSimpleResponse,
  RsDataPostReviewSimpleResponse,
  RsDataString,
} from "../models/index"
import {
  PostReviewCreateRequestFromJSON,
  PostReviewCreateRequestToJSON,
  PostReviewUpdateRequestFromJSON,
  PostReviewUpdateRequestToJSON,
  RsDataListPostReviewSimpleResponseFromJSON,
  RsDataListPostReviewSimpleResponseToJSON,
  RsDataPostReviewSimpleResponseFromJSON,
  RsDataPostReviewSimpleResponseToJSON,
  RsDataStringFromJSON,
  RsDataStringToJSON,
} from "../models/index"

export interface CreateReviewRequest {
  id: number
  postReviewCreateRequest: PostReviewCreateRequest
}

export interface DeleteReviewRequest {
  id: number
  reviewId: number
}

export interface GetReviewsRequest {
  id: number
}

export interface UpdateReviewRequest {
  id: number
  reviewId: number
  postReviewUpdateRequest: PostReviewUpdateRequest
}

/**
 *
 */
export class AdminReviewAPIApi extends runtime.BaseAPI {
  /**
   * 게시글에 새로운 리뷰를 작성합니다.
   * 게시글 리뷰 작성
   */
  async createReviewRaw(
    requestParameters: CreateReviewRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataPostReviewSimpleResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling createReview().',
      )
    }

    if (requestParameters["postReviewCreateRequest"] == null) {
      throw new runtime.RequiredError(
        "postReviewCreateRequest",
        'Required parameter "postReviewCreateRequest" was null or undefined when calling createReview().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/posts/{id}/reviews`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostReviewCreateRequestToJSON(
          requestParameters["postReviewCreateRequest"],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataPostReviewSimpleResponseFromJSON(jsonValue),
    )
  }

  /**
   * 게시글에 새로운 리뷰를 작성합니다.
   * 게시글 리뷰 작성
   */
  async createReview(
    requestParameters: CreateReviewRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataPostReviewSimpleResponse> {
    const response = await this.createReviewRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 특정 게시글의 특정 리뷰를 삭제합니다.
   * 게시글 리뷰 삭제
   */
  async deleteReviewRaw(
    requestParameters: DeleteReviewRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataString>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deleteReview().',
      )
    }

    if (requestParameters["reviewId"] == null) {
      throw new runtime.RequiredError(
        "reviewId",
        'Required parameter "reviewId" was null or undefined when calling deleteReview().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/posts/{id}/reviews/{reviewId}`
          .replace(
            `{${"id"}}`,
            encodeURIComponent(String(requestParameters["id"])),
          )
          .replace(
            `{${"reviewId"}}`,
            encodeURIComponent(String(requestParameters["reviewId"])),
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataStringFromJSON(jsonValue),
    )
  }

  /**
   * 특정 게시글의 특정 리뷰를 삭제합니다.
   * 게시글 리뷰 삭제
   */
  async deleteReview(
    requestParameters: DeleteReviewRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataString> {
    const response = await this.deleteReviewRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 특정 게시글 ID에 해당하는 리뷰 목록을 조회합니다.
   * 게시글 리뷰 목록 조회
   */
  async getReviewsRaw(
    requestParameters: GetReviewsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataListPostReviewSimpleResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getReviews().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/posts/{id}/reviews`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataListPostReviewSimpleResponseFromJSON(jsonValue),
    )
  }

  /**
   * 특정 게시글 ID에 해당하는 리뷰 목록을 조회합니다.
   * 게시글 리뷰 목록 조회
   */
  async getReviews(
    requestParameters: GetReviewsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataListPostReviewSimpleResponse> {
    const response = await this.getReviewsRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * 특정 게시글의 특정 리뷰를 수정합니다.
   * 게시글 리뷰 수정
   */
  async updateReviewRaw(
    requestParameters: UpdateReviewRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataPostReviewSimpleResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling updateReview().',
      )
    }

    if (requestParameters["reviewId"] == null) {
      throw new runtime.RequiredError(
        "reviewId",
        'Required parameter "reviewId" was null or undefined when calling updateReview().',
      )
    }

    if (requestParameters["postReviewUpdateRequest"] == null) {
      throw new runtime.RequiredError(
        "postReviewUpdateRequest",
        'Required parameter "postReviewUpdateRequest" was null or undefined when calling updateReview().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/posts/{id}/reviews/{reviewId}`
          .replace(
            `{${"id"}}`,
            encodeURIComponent(String(requestParameters["id"])),
          )
          .replace(
            `{${"reviewId"}}`,
            encodeURIComponent(String(requestParameters["reviewId"])),
          ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: PostReviewUpdateRequestToJSON(
          requestParameters["postReviewUpdateRequest"],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataPostReviewSimpleResponseFromJSON(jsonValue),
    )
  }

  /**
   * 특정 게시글의 특정 리뷰를 수정합니다.
   * 게시글 리뷰 수정
   */
  async updateReview(
    requestParameters: UpdateReviewRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataPostReviewSimpleResponse> {
    const response = await this.updateReviewRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
