/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RedirectView,
} from '../models/index';
import {
    RedirectViewFromJSON,
    RedirectViewToJSON,
} from '../models/index';

export interface Login1Request {
    code: string;
}

/**
 * 
 */
export class KakaoAPIApi extends runtime.BaseAPI {

    /**
     */
    async login1Raw(requestParameters: Login1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RedirectView>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling login1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/oauth/kakao/login/redirect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedirectViewFromJSON(jsonValue));
    }

    /**
     */
    async login1(requestParameters: Login1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RedirectView> {
        const response = await this.login1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async redirectToKakaoLoginRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RedirectView>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/oauth/kakao/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedirectViewFromJSON(jsonValue));
    }

    /**
     */
    async redirectToKakaoLogin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RedirectView> {
        const response = await this.redirectToKakaoLoginRaw(initOverrides);
        return await response.value();
    }

}
