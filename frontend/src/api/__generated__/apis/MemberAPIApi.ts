/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type {
  LoginRequest,
  MemberCreateRequest,
  MemberPasswordUpdateRequest,
  MemberUpdateRequest,
  RsDataLoginResponse,
  RsDataMemberDetailResponse,
  RsDataObject,
  RsDataString,
} from "../models/index"
import {
  LoginRequestFromJSON,
  LoginRequestToJSON,
  MemberCreateRequestFromJSON,
  MemberCreateRequestToJSON,
  MemberPasswordUpdateRequestFromJSON,
  MemberPasswordUpdateRequestToJSON,
  MemberUpdateRequestFromJSON,
  MemberUpdateRequestToJSON,
  RsDataLoginResponseFromJSON,
  RsDataLoginResponseToJSON,
  RsDataMemberDetailResponseFromJSON,
  RsDataMemberDetailResponseToJSON,
  RsDataObjectFromJSON,
  RsDataObjectToJSON,
  RsDataStringFromJSON,
  RsDataStringToJSON,
} from "../models/index"

export interface LoginOperationRequest {
  loginRequest: LoginRequest
}

export interface SendCodeRequest {
  email: string
}

export interface SignupRequest {
  memberCreateRequest: MemberCreateRequest
}

export interface UpdateMyInfoRequest {
  memberUpdateRequest: MemberUpdateRequest
}

export interface UpdatePasswordRequest {
  memberPasswordUpdateRequest: MemberPasswordUpdateRequest
}

export interface UpdateProfileImageRequest {
  image: Blob
}

export interface VerifyEmailCodeRequest {
  email: string
  code: string
}

/**
 *
 */
export class MemberAPIApi extends runtime.BaseAPI {
  /**
   * 로그인
   */
  async loginRaw(
    requestParameters: LoginOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataLoginResponse>> {
    if (requestParameters["loginRequest"] == null) {
      throw new runtime.RequiredError(
        "loginRequest",
        'Required parameter "loginRequest" was null or undefined when calling login().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/members/login`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LoginRequestToJSON(requestParameters["loginRequest"]),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataLoginResponseFromJSON(jsonValue),
    )
  }

  /**
   * 로그인
   */
  async login(
    requestParameters: LoginOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataLoginResponse> {
    const response = await this.loginRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * 로그아웃
   */
  async logoutRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataObject>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/members/logout`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataObjectFromJSON(jsonValue),
    )
  }

  /**
   * 로그아웃
   */
  async logout(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataObject> {
    const response = await this.logoutRaw(initOverrides)
    return await response.value()
  }

  /**
   * 내 정보 조회
   */
  async myInfoRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataMemberDetailResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/members/me`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataMemberDetailResponseFromJSON(jsonValue),
    )
  }

  /**
   * 내 정보 조회
   */
  async myInfo(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataMemberDetailResponse> {
    const response = await this.myInfoRaw(initOverrides)
    return await response.value()
  }

  /**
   * 인증 이메일 요청
   */
  async sendCodeRaw(
    requestParameters: SendCodeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataObject>> {
    if (requestParameters["email"] == null) {
      throw new runtime.RequiredError(
        "email",
        'Required parameter "email" was null or undefined when calling sendCode().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters["email"] != null) {
      queryParameters["email"] = requestParameters["email"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/members/email/send-code`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataObjectFromJSON(jsonValue),
    )
  }

  /**
   * 인증 이메일 요청
   */
  async sendCode(
    requestParameters: SendCodeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataObject> {
    const response = await this.sendCodeRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * 회원탈퇴
   */
  async signoutRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataObject>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/members/me`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataObjectFromJSON(jsonValue),
    )
  }

  /**
   * 회원탈퇴
   */
  async signout(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataObject> {
    const response = await this.signoutRaw(initOverrides)
    return await response.value()
  }

  /**
   * 회원가입
   */
  async signupRaw(
    requestParameters: SignupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataMemberDetailResponse>> {
    if (requestParameters["memberCreateRequest"] == null) {
      throw new runtime.RequiredError(
        "memberCreateRequest",
        'Required parameter "memberCreateRequest" was null or undefined when calling signup().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/members`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MemberCreateRequestToJSON(
          requestParameters["memberCreateRequest"],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataMemberDetailResponseFromJSON(jsonValue),
    )
  }

  /**
   * 회원가입
   */
  async signup(
    requestParameters: SignupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataMemberDetailResponse> {
    const response = await this.signupRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * 내 정보 수정
   */
  async updateMyInfoRaw(
    requestParameters: UpdateMyInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataMemberDetailResponse>> {
    if (requestParameters["memberUpdateRequest"] == null) {
      throw new runtime.RequiredError(
        "memberUpdateRequest",
        'Required parameter "memberUpdateRequest" was null or undefined when calling updateMyInfo().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/members/me`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: MemberUpdateRequestToJSON(
          requestParameters["memberUpdateRequest"],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataMemberDetailResponseFromJSON(jsonValue),
    )
  }

  /**
   * 내 정보 수정
   */
  async updateMyInfo(
    requestParameters: UpdateMyInfoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataMemberDetailResponse> {
    const response = await this.updateMyInfoRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 비밀번호 변경
   */
  async updatePasswordRaw(
    requestParameters: UpdatePasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataObject>> {
    if (requestParameters["memberPasswordUpdateRequest"] == null) {
      throw new runtime.RequiredError(
        "memberPasswordUpdateRequest",
        'Required parameter "memberPasswordUpdateRequest" was null or undefined when calling updatePassword().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/members/me/password`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: MemberPasswordUpdateRequestToJSON(
          requestParameters["memberPasswordUpdateRequest"],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataObjectFromJSON(jsonValue),
    )
  }

  /**
   * 비밀번호 변경
   */
  async updatePassword(
    requestParameters: UpdatePasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataObject> {
    const response = await this.updatePasswordRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 프로필 이미지 수정
   */
  async updateProfileImageRaw(
    requestParameters: UpdateProfileImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataString>> {
    if (requestParameters["image"] == null) {
      throw new runtime.RequiredError(
        "image",
        'Required parameter "image" was null or undefined when calling updateProfileImage().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }]
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes)

    let formParams: { append(param: string, value: any): any }
    let useForm = false
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm
    if (useForm) {
      formParams = new FormData()
    } else {
      formParams = new URLSearchParams()
    }

    if (requestParameters["image"] != null) {
      formParams.append("image", requestParameters["image"] as any)
    }

    const response = await this.request(
      {
        path: `/api/members/me/profile`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataStringFromJSON(jsonValue),
    )
  }

  /**
   * 프로필 이미지 수정
   */
  async updateProfileImage(
    requestParameters: UpdateProfileImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataString> {
    const response = await this.updateProfileImageRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 이메일 인증 코드 검증
   */
  async verifyEmailCodeRaw(
    requestParameters: VerifyEmailCodeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataObject>> {
    if (requestParameters["email"] == null) {
      throw new runtime.RequiredError(
        "email",
        'Required parameter "email" was null or undefined when calling verifyEmailCode().',
      )
    }

    if (requestParameters["code"] == null) {
      throw new runtime.RequiredError(
        "code",
        'Required parameter "code" was null or undefined when calling verifyEmailCode().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters["email"] != null) {
      queryParameters["email"] = requestParameters["email"]
    }

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/members/email/verify-code`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataObjectFromJSON(jsonValue),
    )
  }

  /**
   * 이메일 인증 코드 검증
   */
  async verifyEmailCode(
    requestParameters: VerifyEmailCodeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataObject> {
    const response = await this.verifyEmailCodeRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
