/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type {
  PaymentConfirmRequest,
  PaymentCreateRequest,
  RsDataPageResponsePaymentSimpleResponse,
  RsDataPaymentDetailResponse,
} from "../models/index"
import {
  PaymentConfirmRequestFromJSON,
  PaymentConfirmRequestToJSON,
  PaymentCreateRequestFromJSON,
  PaymentCreateRequestToJSON,
  RsDataPageResponsePaymentSimpleResponseFromJSON,
  RsDataPageResponsePaymentSimpleResponseToJSON,
  RsDataPaymentDetailResponseFromJSON,
  RsDataPaymentDetailResponseToJSON,
} from "../models/index"

export interface ConfirmPaymentRequest {
  paymentConfirmRequest: PaymentConfirmRequest
}

export interface CreatePaymentRequest {
  paymentCreateRequest: PaymentCreateRequest
}

export interface GetMyPaymentsRequest {
  page?: number
  size?: number
  sort?: Array<string>
}

export interface GetPaymentDetailRequest {
  id: number
}

/**
 *
 */
export class PaymentAPIApi extends runtime.BaseAPI {
  /**
   * 결제를 승인합니다. 토스페이먼츠 API에 결제 승인 요청을 보냅니다.
   * 결제 승인
   */
  async confirmPaymentRaw(
    requestParameters: ConfirmPaymentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataPaymentDetailResponse>> {
    if (requestParameters["paymentConfirmRequest"] == null) {
      throw new runtime.RequiredError(
        "paymentConfirmRequest",
        'Required parameter "paymentConfirmRequest" was null or undefined when calling confirmPayment().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/payments/confirm`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PaymentConfirmRequestToJSON(
          requestParameters["paymentConfirmRequest"],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataPaymentDetailResponseFromJSON(jsonValue),
    )
  }

  /**
   * 결제를 승인합니다. 토스페이먼츠 API에 결제 승인 요청을 보냅니다.
   * 결제 승인
   */
  async confirmPayment(
    requestParameters: ConfirmPaymentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataPaymentDetailResponse> {
    const response = await this.confirmPaymentRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 결제를 생성합니다. 결제 생성 후 결제 상세 정보를 반환합니다.
   * 결제 생성
   */
  async createPaymentRaw(
    requestParameters: CreatePaymentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataPaymentDetailResponse>> {
    if (requestParameters["paymentCreateRequest"] == null) {
      throw new runtime.RequiredError(
        "paymentCreateRequest",
        'Required parameter "paymentCreateRequest" was null or undefined when calling createPayment().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/payments`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PaymentCreateRequestToJSON(
          requestParameters["paymentCreateRequest"],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataPaymentDetailResponseFromJSON(jsonValue),
    )
  }

  /**
   * 결제를 생성합니다. 결제 생성 후 결제 상세 정보를 반환합니다.
   * 결제 생성
   */
  async createPayment(
    requestParameters: CreatePaymentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataPaymentDetailResponse> {
    const response = await this.createPaymentRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 내 결제 목록을 조회합니다. 페이지네이션을 지원합니다.
   * 내 결제 목록 조회
   */
  async getMyPaymentsRaw(
    requestParameters: GetMyPaymentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataPageResponsePaymentSimpleResponse>> {
    const queryParameters: any = {}

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"]
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"]
    }

    if (requestParameters["sort"] != null) {
      queryParameters["sort"] = requestParameters["sort"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/payments/me`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataPageResponsePaymentSimpleResponseFromJSON(jsonValue),
    )
  }

  /**
   * 내 결제 목록을 조회합니다. 페이지네이션을 지원합니다.
   * 내 결제 목록 조회
   */
  async getMyPayments(
    requestParameters: GetMyPaymentsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataPageResponsePaymentSimpleResponse> {
    const response = await this.getMyPaymentsRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 결제 상세 정보를 조회합니다. 결제 ID를 통해 조회합니다.
   * 결제 상세 조회
   */
  async getPaymentDetailRaw(
    requestParameters: GetPaymentDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataPaymentDetailResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getPaymentDetail().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/payments/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataPaymentDetailResponseFromJSON(jsonValue),
    )
  }

  /**
   * 결제 상세 정보를 조회합니다. 결제 ID를 통해 조회합니다.
   * 결제 상세 조회
   */
  async getPaymentDetail(
    requestParameters: GetPaymentDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataPaymentDetailResponse> {
    const response = await this.getPaymentDetailRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
