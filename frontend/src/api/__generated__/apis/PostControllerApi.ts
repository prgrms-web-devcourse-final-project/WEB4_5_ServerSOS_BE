/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type {
  RsDataListPostSimpleResponse,
  RsDataPageResponsePostSimpleResponse,
  RsDataPostDetailResponse,
} from "../models/index"
import {
  RsDataListPostSimpleResponseFromJSON,
  RsDataListPostSimpleResponseToJSON,
  RsDataPageResponsePostSimpleResponseFromJSON,
  RsDataPageResponsePostSimpleResponseToJSON,
  RsDataPostDetailResponseFromJSON,
  RsDataPostDetailResponseToJSON,
} from "../models/index"

export interface GetPopularPostsRequest {
  size?: number
  type?: GetPopularPostsTypeEnum
}

export interface GetPostRequest {
  id: number
}

export interface GetPostsRequest {
  page?: number
  size?: number
  keyword?: string
  type?: GetPostsTypeEnum
  sort?: GetPostsSortEnum
}

/**
 *
 */
export class PostControllerApi extends runtime.BaseAPI {
  /**
   * 개수 지정, 타입 필터링 기능을 제공합니다.
   * 조회순 게시물 목록 조회
   */
  async getPopularPostsRaw(
    requestParameters: GetPopularPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataListPostSimpleResponse>> {
    const queryParameters: any = {}

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"]
    }

    if (requestParameters["type"] != null) {
      queryParameters["type"] = requestParameters["type"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/posts/popular`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataListPostSimpleResponseFromJSON(jsonValue),
    )
  }

  /**
   * 개수 지정, 타입 필터링 기능을 제공합니다.
   * 조회순 게시물 목록 조회
   */
  async getPopularPosts(
    requestParameters: GetPopularPostsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataListPostSimpleResponse> {
    const response = await this.getPopularPostsRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 오픈 예정 게시물 목록 조회
   */
  async getPopularPosts1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataListPostSimpleResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/posts/opening-soon`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataListPostSimpleResponseFromJSON(jsonValue),
    )
  }

  /**
   * 오픈 예정 게시물 목록 조회
   */
  async getPopularPosts1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataListPostSimpleResponse> {
    const response = await this.getPopularPosts1Raw(initOverrides)
    return await response.value()
  }

  /**
   * 게시물 상세 조회
   */
  async getPostRaw(
    requestParameters: GetPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataPostDetailResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getPost().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/posts/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataPostDetailResponseFromJSON(jsonValue),
    )
  }

  /**
   * 게시물 상세 조회
   */
  async getPost(
    requestParameters: GetPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataPostDetailResponse> {
    const response = await this.getPostRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * 페이징, 제목 검색, 타입 필터링, 정렬 기능을 제공합니다.
   * 게시글 목록 조회
   */
  async getPostsRaw(
    requestParameters: GetPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataPageResponsePostSimpleResponse>> {
    const queryParameters: any = {}

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"]
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"]
    }

    if (requestParameters["keyword"] != null) {
      queryParameters["keyword"] = requestParameters["keyword"]
    }

    if (requestParameters["type"] != null) {
      queryParameters["type"] = requestParameters["type"]
    }

    if (requestParameters["sort"] != null) {
      queryParameters["sort"] = requestParameters["sort"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/posts`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataPageResponsePostSimpleResponseFromJSON(jsonValue),
    )
  }

  /**
   * 페이징, 제목 검색, 타입 필터링, 정렬 기능을 제공합니다.
   * 게시글 목록 조회
   */
  async getPosts(
    requestParameters: GetPostsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataPageResponsePostSimpleResponse> {
    const response = await this.getPostsRaw(requestParameters, initOverrides)
    return await response.value()
  }
}

/**
 * @export
 */
export const GetPopularPostsTypeEnum = {
  Play: "PLAY",
  Dance: "DANCE",
  Korean: "KOREAN",
  Concert: "CONCERT",
  Classic: "CLASSIC",
  Musical: "MUSICAL",
  Etc: "ETC",
} as const
export type GetPopularPostsTypeEnum =
  (typeof GetPopularPostsTypeEnum)[keyof typeof GetPopularPostsTypeEnum]
/**
 * @export
 */
export const GetPostsTypeEnum = {
  Play: "PLAY",
  Dance: "DANCE",
  Korean: "KOREAN",
  Concert: "CONCERT",
  Classic: "CLASSIC",
  Musical: "MUSICAL",
  Etc: "ETC",
} as const
export type GetPostsTypeEnum =
  (typeof GetPostsTypeEnum)[keyof typeof GetPostsTypeEnum]
/**
 * @export
 */
export const GetPostsSortEnum = {
  IdDesc: "ID_DESC",
  ViewDesc: "VIEW_DESC",
  OpeningSoon: "OPENING_SOON",
} as const
export type GetPostsSortEnum =
  (typeof GetPostsSortEnum)[keyof typeof GetPostsSortEnum]
