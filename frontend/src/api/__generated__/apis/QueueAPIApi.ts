/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RsDataObject,
  SseEmitter,
} from '../models/index';
import {
    RsDataObjectFromJSON,
    RsDataObjectToJSON,
    SseEmitterFromJSON,
    SseEmitterToJSON,
} from '../models/index';

/**
 * 
 */
export class QueueAPIApi extends runtime.BaseAPI {

    /**
     * 결제 처리 후 퇴장
     */
    async exitRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RsDataObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/queue/exit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RsDataObjectFromJSON(jsonValue));
    }

    /**
     * 결제 처리 후 퇴장
     */
    async exit(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RsDataObject> {
        const response = await this.exitRaw(initOverrides);
        return await response.value();
    }

    /**
     * 대기열 입장 및 구독
     */
    async subscribeWaitingStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SseEmitter>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/queue/stream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SseEmitterFromJSON(jsonValue));
    }

    /**
     * 대기열 입장 및 구독
     */
    async subscribeWaitingStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SseEmitter> {
        const response = await this.subscribeWaitingStatusRaw(initOverrides);
        return await response.value();
    }

}
