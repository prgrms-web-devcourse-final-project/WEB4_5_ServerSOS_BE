/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type {
  ReservationCreateRequest,
  RsDataObject,
  RsDataPageResponseReservationSimpleResponse,
  RsDataReservationDetailResponse,
  RsDataReservationSimpleResponse,
} from "../models/index"
import {
  ReservationCreateRequestFromJSON,
  ReservationCreateRequestToJSON,
  RsDataObjectFromJSON,
  RsDataObjectToJSON,
  RsDataPageResponseReservationSimpleResponseFromJSON,
  RsDataPageResponseReservationSimpleResponseToJSON,
  RsDataReservationDetailResponseFromJSON,
  RsDataReservationDetailResponseToJSON,
  RsDataReservationSimpleResponseFromJSON,
  RsDataReservationSimpleResponseToJSON,
} from "../models/index"

export interface CancelReservationRequest {
  id: number
}

export interface CreateReservationRequest {
  reservationCreateRequest: ReservationCreateRequest
}

export interface DeleteReservationRequest {
  id: number
}

export interface GetMyReservationListRequest {
  page?: number
  size?: number
}

export interface GetReservationRequest {
  id: number
}

/**
 *
 */
export class ReservationApi extends runtime.BaseAPI {
  /**
   * 예약 ID를 기반으로 예약을 취소합니다. - 예약 완료 후 예약 내역에서 취소
   * 예약 취소
   */
  async cancelReservationRaw(
    requestParameters: CancelReservationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataObject>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling cancelReservation().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/reservations/{id}/cancel`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataObjectFromJSON(jsonValue),
    )
  }

  /**
   * 예약 ID를 기반으로 예약을 취소합니다. - 예약 완료 후 예약 내역에서 취소
   * 예약 취소
   */
  async cancelReservation(
    requestParameters: CancelReservationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataObject> {
    const response = await this.cancelReservationRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 공연 세션 ID와 좌석 ID 목록을 기반으로 예약을 생성합니다.
   * 예약 생성
   */
  async createReservationRaw(
    requestParameters: CreateReservationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataReservationSimpleResponse>> {
    if (requestParameters["reservationCreateRequest"] == null) {
      throw new runtime.RequiredError(
        "reservationCreateRequest",
        'Required parameter "reservationCreateRequest" was null or undefined when calling createReservation().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/reservations`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ReservationCreateRequestToJSON(
          requestParameters["reservationCreateRequest"],
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataReservationSimpleResponseFromJSON(jsonValue),
    )
  }

  /**
   * 공연 세션 ID와 좌석 ID 목록을 기반으로 예약을 생성합니다.
   * 예약 생성
   */
  async createReservation(
    requestParameters: CreateReservationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataReservationSimpleResponse> {
    const response = await this.createReservationRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 예약 ID를 기반으로 예약을 삭제합니다. - 예약 생성 후 뒤로가기 시 발생
   * 예약 삭제
   */
  async deleteReservationRaw(
    requestParameters: DeleteReservationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataObject>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deleteReservation().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/reservations/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataObjectFromJSON(jsonValue),
    )
  }

  /**
   * 예약 ID를 기반으로 예약을 삭제합니다. - 예약 생성 후 뒤로가기 시 발생
   * 예약 삭제
   */
  async deleteReservation(
    requestParameters: DeleteReservationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataObject> {
    const response = await this.deleteReservationRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 로그인한 사용자의 예약 목록을 페이지 단위로 조회합니다.(PAID,CANCELED 상태만 보여준다)
   * 내 예약 목록 조회
   */
  async getMyReservationListRaw(
    requestParameters: GetMyReservationListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataPageResponseReservationSimpleResponse>> {
    const queryParameters: any = {}

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"]
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"]
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/reservations/me`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataPageResponseReservationSimpleResponseFromJSON(jsonValue),
    )
  }

  /**
   * 로그인한 사용자의 예약 목록을 페이지 단위로 조회합니다.(PAID,CANCELED 상태만 보여준다)
   * 내 예약 목록 조회
   */
  async getMyReservationList(
    requestParameters: GetMyReservationListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataPageResponseReservationSimpleResponse> {
    const response = await this.getMyReservationListRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * 예약 ID를 기반으로 예약 상세 정보를 조회합니다.
   * 예약 상세 조회
   */
  async getReservationRaw(
    requestParameters: GetReservationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RsDataReservationDetailResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getReservation().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token("Authorization", [])

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/api/reservations/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RsDataReservationDetailResponseFromJSON(jsonValue),
    )
  }

  /**
   * 예약 ID를 기반으로 예약 상세 정보를 조회합니다.
   * 예약 상세 조회
   */
  async getReservation(
    requestParameters: GetReservationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RsDataReservationDetailResponse> {
    const response = await this.getReservationRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
