/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SseEmitter,
} from '../models/index';
import {
    SseEmitterFromJSON,
    SseEmitterToJSON,
} from '../models/index';

export interface Subscribe1Request {
    sessionId: number;
}

/**
 * 
 */
export class SeatControllerApi extends runtime.BaseAPI {

    /**
     * 좌석 상태 실시간 구독
     */
    async subscribe1Raw(requestParameters: Subscribe1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SseEmitter>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling subscribe1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sessionId'] != null) {
            queryParameters['sessionId'] = requestParameters['sessionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Authorization", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/areas/subscribe`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SseEmitterFromJSON(jsonValue));
    }

    /**
     * 좌석 상태 실시간 구독
     */
    async subscribe1(requestParameters: Subscribe1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SseEmitter> {
        const response = await this.subscribe1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
