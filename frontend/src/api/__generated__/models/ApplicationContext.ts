/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime"
import type { ApplicationContextClassLoader } from "./ApplicationContextClassLoader"
import {
  ApplicationContextClassLoaderFromJSON,
  ApplicationContextClassLoaderFromJSONTyped,
  ApplicationContextClassLoaderToJSON,
  ApplicationContextClassLoaderToJSONTyped,
} from "./ApplicationContextClassLoader"
import type { Environment } from "./Environment"
import {
  EnvironmentFromJSON,
  EnvironmentFromJSONTyped,
  EnvironmentToJSON,
  EnvironmentToJSONTyped,
} from "./Environment"

/**
 *
 * @export
 * @interface ApplicationContext
 */
export interface ApplicationContext {
  /**
   *
   * @type {ApplicationContext}
   * @memberof ApplicationContext
   */
  parent?: ApplicationContext
  /**
   *
   * @type {string}
   * @memberof ApplicationContext
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof ApplicationContext
   */
  displayName?: string
  /**
   *
   * @type {string}
   * @memberof ApplicationContext
   */
  applicationName?: string
  /**
   *
   * @type {number}
   * @memberof ApplicationContext
   */
  startupDate?: number
  /**
   *
   * @type {object}
   * @memberof ApplicationContext
   */
  autowireCapableBeanFactory?: object
  /**
   *
   * @type {Environment}
   * @memberof ApplicationContext
   */
  environment?: Environment
  /**
   *
   * @type {number}
   * @memberof ApplicationContext
   */
  beanDefinitionCount?: number
  /**
   *
   * @type {Array<string>}
   * @memberof ApplicationContext
   */
  beanDefinitionNames?: Array<string>
  /**
   *
   * @type {object}
   * @memberof ApplicationContext
   */
  parentBeanFactory?: object
  /**
   *
   * @type {ApplicationContextClassLoader}
   * @memberof ApplicationContext
   */
  classLoader?: ApplicationContextClassLoader
}

/**
 * Check if a given object implements the ApplicationContext interface.
 */
export function instanceOfApplicationContext(
  value: object,
): value is ApplicationContext {
  return true
}

export function ApplicationContextFromJSON(json: any): ApplicationContext {
  return ApplicationContextFromJSONTyped(json, false)
}

export function ApplicationContextFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ApplicationContext {
  if (json == null) {
    return json
  }
  return {
    parent:
      json["parent"] == null
        ? undefined
        : ApplicationContextFromJSON(json["parent"]),
    id: json["id"] == null ? undefined : json["id"],
    displayName: json["displayName"] == null ? undefined : json["displayName"],
    applicationName:
      json["applicationName"] == null ? undefined : json["applicationName"],
    startupDate: json["startupDate"] == null ? undefined : json["startupDate"],
    autowireCapableBeanFactory:
      json["autowireCapableBeanFactory"] == null
        ? undefined
        : json["autowireCapableBeanFactory"],
    environment:
      json["environment"] == null
        ? undefined
        : EnvironmentFromJSON(json["environment"]),
    beanDefinitionCount:
      json["beanDefinitionCount"] == null
        ? undefined
        : json["beanDefinitionCount"],
    beanDefinitionNames:
      json["beanDefinitionNames"] == null
        ? undefined
        : json["beanDefinitionNames"],
    parentBeanFactory:
      json["parentBeanFactory"] == null ? undefined : json["parentBeanFactory"],
    classLoader:
      json["classLoader"] == null
        ? undefined
        : ApplicationContextClassLoaderFromJSON(json["classLoader"]),
  }
}

export function ApplicationContextToJSON(json: any): ApplicationContext {
  return ApplicationContextToJSONTyped(json, false)
}

export function ApplicationContextToJSONTyped(
  value?: ApplicationContext | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    parent: ApplicationContextToJSON(value["parent"]),
    id: value["id"],
    displayName: value["displayName"],
    applicationName: value["applicationName"],
    startupDate: value["startupDate"],
    autowireCapableBeanFactory: value["autowireCapableBeanFactory"],
    environment: EnvironmentToJSON(value["environment"]),
    beanDefinitionCount: value["beanDefinitionCount"],
    beanDefinitionNames: value["beanDefinitionNames"],
    parentBeanFactory: value["parentBeanFactory"],
    classLoader: ApplicationContextClassLoaderToJSON(value["classLoader"]),
  }
}
