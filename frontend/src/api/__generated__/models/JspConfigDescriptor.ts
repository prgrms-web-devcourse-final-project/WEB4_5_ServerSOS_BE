/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime"
import type { TaglibDescriptor } from "./TaglibDescriptor"
import {
  TaglibDescriptorFromJSON,
  TaglibDescriptorFromJSONTyped,
  TaglibDescriptorToJSON,
  TaglibDescriptorToJSONTyped,
} from "./TaglibDescriptor"
import type { JspPropertyGroupDescriptor } from "./JspPropertyGroupDescriptor"
import {
  JspPropertyGroupDescriptorFromJSON,
  JspPropertyGroupDescriptorFromJSONTyped,
  JspPropertyGroupDescriptorToJSON,
  JspPropertyGroupDescriptorToJSONTyped,
} from "./JspPropertyGroupDescriptor"

/**
 *
 * @export
 * @interface JspConfigDescriptor
 */
export interface JspConfigDescriptor {
  /**
   *
   * @type {Array<JspPropertyGroupDescriptor>}
   * @memberof JspConfigDescriptor
   */
  jspPropertyGroups?: Array<JspPropertyGroupDescriptor>
  /**
   *
   * @type {Array<TaglibDescriptor>}
   * @memberof JspConfigDescriptor
   */
  taglibs?: Array<TaglibDescriptor>
}

/**
 * Check if a given object implements the JspConfigDescriptor interface.
 */
export function instanceOfJspConfigDescriptor(
  value: object,
): value is JspConfigDescriptor {
  return true
}

export function JspConfigDescriptorFromJSON(json: any): JspConfigDescriptor {
  return JspConfigDescriptorFromJSONTyped(json, false)
}

export function JspConfigDescriptorFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): JspConfigDescriptor {
  if (json == null) {
    return json
  }
  return {
    jspPropertyGroups:
      json["jspPropertyGroups"] == null
        ? undefined
        : (json["jspPropertyGroups"] as Array<any>).map(
            JspPropertyGroupDescriptorFromJSON,
          ),
    taglibs:
      json["taglibs"] == null
        ? undefined
        : (json["taglibs"] as Array<any>).map(TaglibDescriptorFromJSON),
  }
}

export function JspConfigDescriptorToJSON(json: any): JspConfigDescriptor {
  return JspConfigDescriptorToJSONTyped(json, false)
}

export function JspConfigDescriptorToJSONTyped(
  value?: JspConfigDescriptor | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    jspPropertyGroups:
      value["jspPropertyGroups"] == null
        ? undefined
        : (value["jspPropertyGroups"] as Array<any>).map(
            JspPropertyGroupDescriptorToJSON,
          ),
    taglibs:
      value["taglibs"] == null
        ? undefined
        : (value["taglibs"] as Array<any>).map(TaglibDescriptorToJSON),
  }
}
