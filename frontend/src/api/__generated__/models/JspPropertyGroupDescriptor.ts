/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface JspPropertyGroupDescriptor
 */
export interface JspPropertyGroupDescriptor {
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    defaultContentType?: string;
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    buffer?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof JspPropertyGroupDescriptor
     */
    urlPatterns?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    deferredSyntaxAllowedAsLiteral?: string;
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    elIgnored?: string;
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    errorOnELNotFound?: string;
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    pageEncoding?: string;
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    scriptingInvalid?: string;
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    isXml?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof JspPropertyGroupDescriptor
     */
    includePreludes?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof JspPropertyGroupDescriptor
     */
    includeCodas?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    trimDirectiveWhitespaces?: string;
    /**
     * 
     * @type {string}
     * @memberof JspPropertyGroupDescriptor
     */
    errorOnUndeclaredNamespace?: string;
}

/**
 * Check if a given object implements the JspPropertyGroupDescriptor interface.
 */
export function instanceOfJspPropertyGroupDescriptor(value: object): value is JspPropertyGroupDescriptor {
    return true;
}

export function JspPropertyGroupDescriptorFromJSON(json: any): JspPropertyGroupDescriptor {
    return JspPropertyGroupDescriptorFromJSONTyped(json, false);
}

export function JspPropertyGroupDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): JspPropertyGroupDescriptor {
    if (json == null) {
        return json;
    }
    return {
        
        'defaultContentType': json['defaultContentType'] == null ? undefined : json['defaultContentType'],
        'buffer': json['buffer'] == null ? undefined : json['buffer'],
        'urlPatterns': json['urlPatterns'] == null ? undefined : json['urlPatterns'],
        'deferredSyntaxAllowedAsLiteral': json['deferredSyntaxAllowedAsLiteral'] == null ? undefined : json['deferredSyntaxAllowedAsLiteral'],
        'elIgnored': json['elIgnored'] == null ? undefined : json['elIgnored'],
        'errorOnELNotFound': json['errorOnELNotFound'] == null ? undefined : json['errorOnELNotFound'],
        'pageEncoding': json['pageEncoding'] == null ? undefined : json['pageEncoding'],
        'scriptingInvalid': json['scriptingInvalid'] == null ? undefined : json['scriptingInvalid'],
        'isXml': json['isXml'] == null ? undefined : json['isXml'],
        'includePreludes': json['includePreludes'] == null ? undefined : json['includePreludes'],
        'includeCodas': json['includeCodas'] == null ? undefined : json['includeCodas'],
        'trimDirectiveWhitespaces': json['trimDirectiveWhitespaces'] == null ? undefined : json['trimDirectiveWhitespaces'],
        'errorOnUndeclaredNamespace': json['errorOnUndeclaredNamespace'] == null ? undefined : json['errorOnUndeclaredNamespace'],
    };
}

export function JspPropertyGroupDescriptorToJSON(json: any): JspPropertyGroupDescriptor {
    return JspPropertyGroupDescriptorToJSONTyped(json, false);
}

export function JspPropertyGroupDescriptorToJSONTyped(value?: JspPropertyGroupDescriptor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'defaultContentType': value['defaultContentType'],
        'buffer': value['buffer'],
        'urlPatterns': value['urlPatterns'],
        'deferredSyntaxAllowedAsLiteral': value['deferredSyntaxAllowedAsLiteral'],
        'elIgnored': value['elIgnored'],
        'errorOnELNotFound': value['errorOnELNotFound'],
        'pageEncoding': value['pageEncoding'],
        'scriptingInvalid': value['scriptingInvalid'],
        'isXml': value['isXml'],
        'includePreludes': value['includePreludes'],
        'includeCodas': value['includeCodas'],
        'trimDirectiveWhitespaces': value['trimDirectiveWhitespaces'],
        'errorOnUndeclaredNamespace': value['errorOnUndeclaredNamespace'],
    };
}

