/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime"
import type { BaseLogResponse } from "./BaseLogResponse"
import {
  BaseLogResponseFromJSON,
  BaseLogResponseFromJSONTyped,
  BaseLogResponseToJSON,
  BaseLogResponseToJSONTyped,
} from "./BaseLogResponse"

/**
 *
 * @export
 * @interface MemberLogResponse
 */
export interface MemberLogResponse {
  /**
   *
   * @type {string}
   * @memberof MemberLogResponse
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof MemberLogResponse
   */
  nickname?: string
  /**
   *
   * @type {string}
   * @memberof MemberLogResponse
   */
  authority?: MemberLogResponseAuthorityEnum
  /**
   *
   * @type {string}
   * @memberof MemberLogResponse
   */
  socialProvider?: MemberLogResponseSocialProviderEnum
  /**
   *
   * @type {BaseLogResponse}
   * @memberof MemberLogResponse
   */
  base?: BaseLogResponse
}

/**
 * @export
 */
export const MemberLogResponseAuthorityEnum = {
  RoleAdmin: "ROLE_ADMIN",
  RoleUser: "ROLE_USER",
} as const
export type MemberLogResponseAuthorityEnum =
  (typeof MemberLogResponseAuthorityEnum)[keyof typeof MemberLogResponseAuthorityEnum]

/**
 * @export
 */
export const MemberLogResponseSocialProviderEnum = {
  None: "NONE",
  Kakao: "KAKAO",
  Google: "GOOGLE",
} as const
export type MemberLogResponseSocialProviderEnum =
  (typeof MemberLogResponseSocialProviderEnum)[keyof typeof MemberLogResponseSocialProviderEnum]

/**
 * Check if a given object implements the MemberLogResponse interface.
 */
export function instanceOfMemberLogResponse(
  value: object,
): value is MemberLogResponse {
  return true
}

export function MemberLogResponseFromJSON(json: any): MemberLogResponse {
  return MemberLogResponseFromJSONTyped(json, false)
}

export function MemberLogResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): MemberLogResponse {
  if (json == null) {
    return json
  }
  return {
    email: json["email"] == null ? undefined : json["email"],
    nickname: json["nickname"] == null ? undefined : json["nickname"],
    authority: json["authority"] == null ? undefined : json["authority"],
    socialProvider:
      json["socialProvider"] == null ? undefined : json["socialProvider"],
    base:
      json["base"] == null ? undefined : BaseLogResponseFromJSON(json["base"]),
  }
}

export function MemberLogResponseToJSON(json: any): MemberLogResponse {
  return MemberLogResponseToJSONTyped(json, false)
}

export function MemberLogResponseToJSONTyped(
  value?: MemberLogResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    email: value["email"],
    nickname: value["nickname"],
    authority: value["authority"],
    socialProvider: value["socialProvider"],
    base: BaseLogResponseToJSON(value["base"]),
  }
}
