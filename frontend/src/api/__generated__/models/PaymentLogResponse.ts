/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime"
import type { BaseLogResponse } from "./BaseLogResponse"
import {
  BaseLogResponseFromJSON,
  BaseLogResponseFromJSONTyped,
  BaseLogResponseToJSON,
  BaseLogResponseToJSONTyped,
} from "./BaseLogResponse"

/**
 *
 * @export
 * @interface PaymentLogResponse
 */
export interface PaymentLogResponse {
  /**
   *
   * @type {number}
   * @memberof PaymentLogResponse
   */
  paymentId?: number
  /**
   *
   * @type {number}
   * @memberof PaymentLogResponse
   */
  reservationId?: number
  /**
   *
   * @type {string}
   * @memberof PaymentLogResponse
   */
  orderId?: string
  /**
   *
   * @type {number}
   * @memberof PaymentLogResponse
   */
  amount?: number
  /**
   *
   * @type {string}
   * @memberof PaymentLogResponse
   */
  status?: PaymentLogResponseStatusEnum
  /**
   *
   * @type {Date}
   * @memberof PaymentLogResponse
   */
  paymentTime?: Date
  /**
   *
   * @type {BaseLogResponse}
   * @memberof PaymentLogResponse
   */
  base?: BaseLogResponse
}

/**
 * @export
 */
export const PaymentLogResponseStatusEnum = {
  Pending: "PENDING",
  Completed: "COMPLETED",
  Failed: "FAILED",
  Canceled: "CANCELED",
  Expired: "EXPIRED",
} as const
export type PaymentLogResponseStatusEnum =
  (typeof PaymentLogResponseStatusEnum)[keyof typeof PaymentLogResponseStatusEnum]

/**
 * Check if a given object implements the PaymentLogResponse interface.
 */
export function instanceOfPaymentLogResponse(
  value: object,
): value is PaymentLogResponse {
  return true
}

export function PaymentLogResponseFromJSON(json: any): PaymentLogResponse {
  return PaymentLogResponseFromJSONTyped(json, false)
}

export function PaymentLogResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PaymentLogResponse {
  if (json == null) {
    return json
  }
  return {
    paymentId: json["paymentId"] == null ? undefined : json["paymentId"],
    reservationId:
      json["reservationId"] == null ? undefined : json["reservationId"],
    orderId: json["orderId"] == null ? undefined : json["orderId"],
    amount: json["amount"] == null ? undefined : json["amount"],
    status: json["status"] == null ? undefined : json["status"],
    paymentTime:
      json["paymentTime"] == null ? undefined : new Date(json["paymentTime"]),
    base:
      json["base"] == null ? undefined : BaseLogResponseFromJSON(json["base"]),
  }
}

export function PaymentLogResponseToJSON(json: any): PaymentLogResponse {
  return PaymentLogResponseToJSONTyped(json, false)
}

export function PaymentLogResponseToJSONTyped(
  value?: PaymentLogResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    paymentId: value["paymentId"],
    reservationId: value["reservationId"],
    orderId: value["orderId"],
    amount: value["amount"],
    status: value["status"],
    paymentTime:
      value["paymentTime"] == null
        ? undefined
        : value["paymentTime"].toISOString(),
    base: BaseLogResponseToJSON(value["base"]),
  }
}
