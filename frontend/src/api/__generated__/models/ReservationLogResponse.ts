/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BaseLogResponse } from './BaseLogResponse';
import {
    BaseLogResponseFromJSON,
    BaseLogResponseFromJSONTyped,
    BaseLogResponseToJSON,
    BaseLogResponseToJSONTyped,
} from './BaseLogResponse';

/**
 * 
 * @export
 * @interface ReservationLogResponse
 */
export interface ReservationLogResponse {
    /**
     * 
     * @type {number}
     * @memberof ReservationLogResponse
     */
    reservationId?: number;
    /**
     * 
     * @type {number}
     * @memberof ReservationLogResponse
     */
    performanceSessionId?: number;
    /**
     * 
     * @type {string}
     * @memberof ReservationLogResponse
     */
    status?: ReservationLogResponseStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ReservationLogResponse
     */
    totalPrice?: number;
    /**
     * 
     * @type {Date}
     * @memberof ReservationLogResponse
     */
    reservationTime?: Date;
    /**
     * 
     * @type {BaseLogResponse}
     * @memberof ReservationLogResponse
     */
    base?: BaseLogResponse;
}


/**
 * @export
 */
export const ReservationLogResponseStatusEnum = {
    Reserved: 'RESERVED',
    Canceled: 'CANCELED',
    Paid: 'PAID',
    Expired: 'EXPIRED'
} as const;
export type ReservationLogResponseStatusEnum = typeof ReservationLogResponseStatusEnum[keyof typeof ReservationLogResponseStatusEnum];


/**
 * Check if a given object implements the ReservationLogResponse interface.
 */
export function instanceOfReservationLogResponse(value: object): value is ReservationLogResponse {
    return true;
}

export function ReservationLogResponseFromJSON(json: any): ReservationLogResponse {
    return ReservationLogResponseFromJSONTyped(json, false);
}

export function ReservationLogResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationLogResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'reservationId': json['reservationId'] == null ? undefined : json['reservationId'],
        'performanceSessionId': json['performanceSessionId'] == null ? undefined : json['performanceSessionId'],
        'status': json['status'] == null ? undefined : json['status'],
        'totalPrice': json['totalPrice'] == null ? undefined : json['totalPrice'],
        'reservationTime': json['reservationTime'] == null ? undefined : (new Date(json['reservationTime'])),
        'base': json['base'] == null ? undefined : BaseLogResponseFromJSON(json['base']),
    };
}

export function ReservationLogResponseToJSON(json: any): ReservationLogResponse {
    return ReservationLogResponseToJSONTyped(json, false);
}

export function ReservationLogResponseToJSONTyped(value?: ReservationLogResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'reservationId': value['reservationId'],
        'performanceSessionId': value['performanceSessionId'],
        'status': value['status'],
        'totalPrice': value['totalPrice'],
        'reservationTime': value['reservationTime'] == null ? undefined : ((value['reservationTime']).toISOString()),
        'base': BaseLogResponseToJSON(value['base']),
    };
}

