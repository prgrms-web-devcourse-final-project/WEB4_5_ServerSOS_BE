/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime"
import type { SeatSimpleResponse } from "./SeatSimpleResponse"
import {
  SeatSimpleResponseFromJSON,
  SeatSimpleResponseFromJSONTyped,
  SeatSimpleResponseToJSON,
  SeatSimpleResponseToJSONTyped,
} from "./SeatSimpleResponse"

/**
 *
 * @export
 * @interface ReservationSimpleResponse
 */
export interface ReservationSimpleResponse {
  /**
   *
   * @type {number}
   * @memberof ReservationSimpleResponse
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof ReservationSimpleResponse
   */
  memberId?: string
  /**
   *
   * @type {number}
   * @memberof ReservationSimpleResponse
   */
  performanceSessionId?: number
  /**
   *
   * @type {number}
   * @memberof ReservationSimpleResponse
   */
  totalPrice?: number
  /**
   *
   * @type {string}
   * @memberof ReservationSimpleResponse
   */
  status?: ReservationSimpleResponseStatusEnum
  /**
   *
   * @type {Date}
   * @memberof ReservationSimpleResponse
   */
  reservationTime?: Date
  /**
   *
   * @type {Array<SeatSimpleResponse>}
   * @memberof ReservationSimpleResponse
   */
  seats?: Array<SeatSimpleResponse>
}

/**
 * @export
 */
export const ReservationSimpleResponseStatusEnum = {
  Reserved: "RESERVED",
  Canceled: "CANCELED",
  Paid: "PAID",
  Expired: "EXPIRED",
} as const
export type ReservationSimpleResponseStatusEnum =
  (typeof ReservationSimpleResponseStatusEnum)[keyof typeof ReservationSimpleResponseStatusEnum]

/**
 * Check if a given object implements the ReservationSimpleResponse interface.
 */
export function instanceOfReservationSimpleResponse(
  value: object,
): value is ReservationSimpleResponse {
  return true
}

export function ReservationSimpleResponseFromJSON(
  json: any,
): ReservationSimpleResponse {
  return ReservationSimpleResponseFromJSONTyped(json, false)
}

export function ReservationSimpleResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ReservationSimpleResponse {
  if (json == null) {
    return json
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    memberId: json["memberId"] == null ? undefined : json["memberId"],
    performanceSessionId:
      json["performance_session_id"] == null
        ? undefined
        : json["performance_session_id"],
    totalPrice: json["total_price"] == null ? undefined : json["total_price"],
    status: json["status"] == null ? undefined : json["status"],
    reservationTime:
      json["reservation_time"] == null
        ? undefined
        : new Date(json["reservation_time"]),
    seats:
      json["seats"] == null
        ? undefined
        : (json["seats"] as Array<any>).map(SeatSimpleResponseFromJSON),
  }
}

export function ReservationSimpleResponseToJSON(
  json: any,
): ReservationSimpleResponse {
  return ReservationSimpleResponseToJSONTyped(json, false)
}

export function ReservationSimpleResponseToJSONTyped(
  value?: ReservationSimpleResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    id: value["id"],
    memberId: value["memberId"],
    performance_session_id: value["performanceSessionId"],
    total_price: value["totalPrice"],
    status: value["status"],
    reservation_time:
      value["reservationTime"] == null
        ? undefined
        : value["reservationTime"].toISOString(),
    seats:
      value["seats"] == null
        ? undefined
        : (value["seats"] as Array<any>).map(SeatSimpleResponseToJSON),
  }
}
