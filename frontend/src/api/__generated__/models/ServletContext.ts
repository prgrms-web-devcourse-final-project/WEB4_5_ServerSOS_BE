/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime"
import type { ServletRegistration } from "./ServletRegistration"
import {
  ServletRegistrationFromJSON,
  ServletRegistrationFromJSONTyped,
  ServletRegistrationToJSON,
  ServletRegistrationToJSONTyped,
} from "./ServletRegistration"
import type { ApplicationContextClassLoaderParentUnnamedModuleClassLoader } from "./ApplicationContextClassLoaderParentUnnamedModuleClassLoader"
import {
  ApplicationContextClassLoaderParentUnnamedModuleClassLoaderFromJSON,
  ApplicationContextClassLoaderParentUnnamedModuleClassLoaderFromJSONTyped,
  ApplicationContextClassLoaderParentUnnamedModuleClassLoaderToJSON,
  ApplicationContextClassLoaderParentUnnamedModuleClassLoaderToJSONTyped,
} from "./ApplicationContextClassLoaderParentUnnamedModuleClassLoader"
import type { JspConfigDescriptor } from "./JspConfigDescriptor"
import {
  JspConfigDescriptorFromJSON,
  JspConfigDescriptorFromJSONTyped,
  JspConfigDescriptorToJSON,
  JspConfigDescriptorToJSONTyped,
} from "./JspConfigDescriptor"
import type { SessionCookieConfig } from "./SessionCookieConfig"
import {
  SessionCookieConfigFromJSON,
  SessionCookieConfigFromJSONTyped,
  SessionCookieConfigToJSON,
  SessionCookieConfigToJSONTyped,
} from "./SessionCookieConfig"
import type { FilterRegistration } from "./FilterRegistration"
import {
  FilterRegistrationFromJSON,
  FilterRegistrationFromJSONTyped,
  FilterRegistrationToJSON,
  FilterRegistrationToJSONTyped,
} from "./FilterRegistration"

/**
 *
 * @export
 * @interface ServletContext
 */
export interface ServletContext {
  /**
   *
   * @type {SessionCookieConfig}
   * @memberof ServletContext
   */
  sessionCookieConfig?: SessionCookieConfig
  /**
   *
   * @type {string}
   * @memberof ServletContext
   */
  virtualServerName?: string
  /**
   *
   * @type {ApplicationContextClassLoaderParentUnnamedModuleClassLoader}
   * @memberof ServletContext
   */
  classLoader?: ApplicationContextClassLoaderParentUnnamedModuleClassLoader
  /**
   *
   * @type {number}
   * @memberof ServletContext
   */
  majorVersion?: number
  /**
   *
   * @type {number}
   * @memberof ServletContext
   */
  minorVersion?: number
  /**
   *
   * @type {object}
   * @memberof ServletContext
   */
  attributeNames?: object
  /**
   *
   * @type {string}
   * @memberof ServletContext
   */
  contextPath?: string
  /**
   *
   * @type {object}
   * @memberof ServletContext
   */
  initParameterNames?: object
  /**
   *
   * @type {Set<string>}
   * @memberof ServletContext
   */
  sessionTrackingModes?: Set<ServletContextSessionTrackingModesEnum>
  /**
   *
   * @type {number}
   * @memberof ServletContext
   */
  sessionTimeout?: number
  /**
   *
   * @type {{ [key: string]: ServletRegistration; }}
   * @memberof ServletContext
   */
  servletRegistrations?: { [key: string]: ServletRegistration }
  /**
   *
   * @type {number}
   * @memberof ServletContext
   */
  effectiveMajorVersion?: number
  /**
   *
   * @type {number}
   * @memberof ServletContext
   */
  effectiveMinorVersion?: number
  /**
   *
   * @type {string}
   * @memberof ServletContext
   */
  serverInfo?: string
  /**
   *
   * @type {string}
   * @memberof ServletContext
   */
  servletContextName?: string
  /**
   *
   * @type {{ [key: string]: FilterRegistration; }}
   * @memberof ServletContext
   */
  filterRegistrations?: { [key: string]: FilterRegistration }
  /**
   *
   * @type {Set<string>}
   * @memberof ServletContext
   */
  defaultSessionTrackingModes?: Set<ServletContextDefaultSessionTrackingModesEnum>
  /**
   *
   * @type {Set<string>}
   * @memberof ServletContext
   */
  effectiveSessionTrackingModes?: Set<ServletContextEffectiveSessionTrackingModesEnum>
  /**
   *
   * @type {JspConfigDescriptor}
   * @memberof ServletContext
   */
  jspConfigDescriptor?: JspConfigDescriptor
  /**
   *
   * @type {string}
   * @memberof ServletContext
   */
  requestCharacterEncoding?: string
  /**
   *
   * @type {string}
   * @memberof ServletContext
   */
  responseCharacterEncoding?: string
}

/**
 * @export
 */
export const ServletContextSessionTrackingModesEnum = {
  Cookie: "COOKIE",
  Url: "URL",
  Ssl: "SSL",
} as const
export type ServletContextSessionTrackingModesEnum =
  (typeof ServletContextSessionTrackingModesEnum)[keyof typeof ServletContextSessionTrackingModesEnum]

/**
 * @export
 */
export const ServletContextDefaultSessionTrackingModesEnum = {
  Cookie: "COOKIE",
  Url: "URL",
  Ssl: "SSL",
} as const
export type ServletContextDefaultSessionTrackingModesEnum =
  (typeof ServletContextDefaultSessionTrackingModesEnum)[keyof typeof ServletContextDefaultSessionTrackingModesEnum]

/**
 * @export
 */
export const ServletContextEffectiveSessionTrackingModesEnum = {
  Cookie: "COOKIE",
  Url: "URL",
  Ssl: "SSL",
} as const
export type ServletContextEffectiveSessionTrackingModesEnum =
  (typeof ServletContextEffectiveSessionTrackingModesEnum)[keyof typeof ServletContextEffectiveSessionTrackingModesEnum]

/**
 * Check if a given object implements the ServletContext interface.
 */
export function instanceOfServletContext(
  value: object,
): value is ServletContext {
  return true
}

export function ServletContextFromJSON(json: any): ServletContext {
  return ServletContextFromJSONTyped(json, false)
}

export function ServletContextFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ServletContext {
  if (json == null) {
    return json
  }
  return {
    sessionCookieConfig:
      json["sessionCookieConfig"] == null
        ? undefined
        : SessionCookieConfigFromJSON(json["sessionCookieConfig"]),
    virtualServerName:
      json["virtualServerName"] == null ? undefined : json["virtualServerName"],
    classLoader:
      json["classLoader"] == null
        ? undefined
        : ApplicationContextClassLoaderParentUnnamedModuleClassLoaderFromJSON(
            json["classLoader"],
          ),
    majorVersion:
      json["majorVersion"] == null ? undefined : json["majorVersion"],
    minorVersion:
      json["minorVersion"] == null ? undefined : json["minorVersion"],
    attributeNames:
      json["attributeNames"] == null ? undefined : json["attributeNames"],
    contextPath: json["contextPath"] == null ? undefined : json["contextPath"],
    initParameterNames:
      json["initParameterNames"] == null
        ? undefined
        : json["initParameterNames"],
    sessionTrackingModes:
      json["sessionTrackingModes"] == null
        ? undefined
        : new Set(json["sessionTrackingModes"]),
    sessionTimeout:
      json["sessionTimeout"] == null ? undefined : json["sessionTimeout"],
    servletRegistrations:
      json["servletRegistrations"] == null
        ? undefined
        : mapValues(json["servletRegistrations"], ServletRegistrationFromJSON),
    effectiveMajorVersion:
      json["effectiveMajorVersion"] == null
        ? undefined
        : json["effectiveMajorVersion"],
    effectiveMinorVersion:
      json["effectiveMinorVersion"] == null
        ? undefined
        : json["effectiveMinorVersion"],
    serverInfo: json["serverInfo"] == null ? undefined : json["serverInfo"],
    servletContextName:
      json["servletContextName"] == null
        ? undefined
        : json["servletContextName"],
    filterRegistrations:
      json["filterRegistrations"] == null
        ? undefined
        : mapValues(json["filterRegistrations"], FilterRegistrationFromJSON),
    defaultSessionTrackingModes:
      json["defaultSessionTrackingModes"] == null
        ? undefined
        : new Set(json["defaultSessionTrackingModes"]),
    effectiveSessionTrackingModes:
      json["effectiveSessionTrackingModes"] == null
        ? undefined
        : new Set(json["effectiveSessionTrackingModes"]),
    jspConfigDescriptor:
      json["jspConfigDescriptor"] == null
        ? undefined
        : JspConfigDescriptorFromJSON(json["jspConfigDescriptor"]),
    requestCharacterEncoding:
      json["requestCharacterEncoding"] == null
        ? undefined
        : json["requestCharacterEncoding"],
    responseCharacterEncoding:
      json["responseCharacterEncoding"] == null
        ? undefined
        : json["responseCharacterEncoding"],
  }
}

export function ServletContextToJSON(json: any): ServletContext {
  return ServletContextToJSONTyped(json, false)
}

export function ServletContextToJSONTyped(
  value?: ServletContext | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    sessionCookieConfig: SessionCookieConfigToJSON(
      value["sessionCookieConfig"],
    ),
    virtualServerName: value["virtualServerName"],
    classLoader:
      ApplicationContextClassLoaderParentUnnamedModuleClassLoaderToJSON(
        value["classLoader"],
      ),
    majorVersion: value["majorVersion"],
    minorVersion: value["minorVersion"],
    attributeNames: value["attributeNames"],
    contextPath: value["contextPath"],
    initParameterNames: value["initParameterNames"],
    sessionTrackingModes:
      value["sessionTrackingModes"] == null
        ? undefined
        : Array.from(value["sessionTrackingModes"] as Set<any>),
    sessionTimeout: value["sessionTimeout"],
    servletRegistrations:
      value["servletRegistrations"] == null
        ? undefined
        : mapValues(value["servletRegistrations"], ServletRegistrationToJSON),
    effectiveMajorVersion: value["effectiveMajorVersion"],
    effectiveMinorVersion: value["effectiveMinorVersion"],
    serverInfo: value["serverInfo"],
    servletContextName: value["servletContextName"],
    filterRegistrations:
      value["filterRegistrations"] == null
        ? undefined
        : mapValues(value["filterRegistrations"], FilterRegistrationToJSON),
    defaultSessionTrackingModes:
      value["defaultSessionTrackingModes"] == null
        ? undefined
        : Array.from(value["defaultSessionTrackingModes"] as Set<any>),
    effectiveSessionTrackingModes:
      value["effectiveSessionTrackingModes"] == null
        ? undefined
        : Array.from(value["effectiveSessionTrackingModes"] as Set<any>),
    jspConfigDescriptor: JspConfigDescriptorToJSON(
      value["jspConfigDescriptor"],
    ),
    requestCharacterEncoding: value["requestCharacterEncoding"],
    responseCharacterEncoding: value["responseCharacterEncoding"],
  }
}
