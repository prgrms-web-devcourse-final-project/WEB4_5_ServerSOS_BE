/* tslint:disable */
/* eslint-disable */
/**
 * PickGO API Document
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ServletRegistration } from './ServletRegistration';
import {
    ServletRegistrationFromJSON,
    ServletRegistrationFromJSONTyped,
    ServletRegistrationToJSON,
    ServletRegistrationToJSONTyped,
} from './ServletRegistration';
import type { ApplicationContextClassLoaderParentUnnamedModuleClassLoader } from './ApplicationContextClassLoaderParentUnnamedModuleClassLoader';
import {
    ApplicationContextClassLoaderParentUnnamedModuleClassLoaderFromJSON,
    ApplicationContextClassLoaderParentUnnamedModuleClassLoaderFromJSONTyped,
    ApplicationContextClassLoaderParentUnnamedModuleClassLoaderToJSON,
    ApplicationContextClassLoaderParentUnnamedModuleClassLoaderToJSONTyped,
} from './ApplicationContextClassLoaderParentUnnamedModuleClassLoader';
import type { JspConfigDescriptor } from './JspConfigDescriptor';
import {
    JspConfigDescriptorFromJSON,
    JspConfigDescriptorFromJSONTyped,
    JspConfigDescriptorToJSON,
    JspConfigDescriptorToJSONTyped,
} from './JspConfigDescriptor';
import type { SessionCookieConfig } from './SessionCookieConfig';
import {
    SessionCookieConfigFromJSON,
    SessionCookieConfigFromJSONTyped,
    SessionCookieConfigToJSON,
    SessionCookieConfigToJSONTyped,
} from './SessionCookieConfig';
import type { FilterRegistration } from './FilterRegistration';
import {
    FilterRegistrationFromJSON,
    FilterRegistrationFromJSONTyped,
    FilterRegistrationToJSON,
    FilterRegistrationToJSONTyped,
} from './FilterRegistration';

/**
 * 
 * @export
 * @interface ServletContext
 */
export interface ServletContext {
    /**
     * 
     * @type {ApplicationContextClassLoaderParentUnnamedModuleClassLoader}
     * @memberof ServletContext
     */
    classLoader?: ApplicationContextClassLoaderParentUnnamedModuleClassLoader;
    /**
     * 
     * @type {number}
     * @memberof ServletContext
     */
    majorVersion?: number;
    /**
     * 
     * @type {number}
     * @memberof ServletContext
     */
    minorVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof ServletContext
     */
    servletContextName?: string;
    /**
     * 
     * @type {{ [key: string]: FilterRegistration; }}
     * @memberof ServletContext
     */
    filterRegistrations?: { [key: string]: FilterRegistration; };
    /**
     * 
     * @type {SessionCookieConfig}
     * @memberof ServletContext
     */
    sessionCookieConfig?: SessionCookieConfig;
    /**
     * 
     * @type {JspConfigDescriptor}
     * @memberof ServletContext
     */
    jspConfigDescriptor?: JspConfigDescriptor;
    /**
     * 
     * @type {string}
     * @memberof ServletContext
     */
    virtualServerName?: string;
    /**
     * 
     * @type {number}
     * @memberof ServletContext
     */
    sessionTimeout?: number;
    /**
     * 
     * @type {object}
     * @memberof ServletContext
     */
    initParameterNames?: object;
    /**
     * 
     * @type {object}
     * @memberof ServletContext
     */
    attributeNames?: object;
    /**
     * 
     * @type {string}
     * @memberof ServletContext
     */
    serverInfo?: string;
    /**
     * 
     * @type {string}
     * @memberof ServletContext
     */
    contextPath?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof ServletContext
     */
    effectiveSessionTrackingModes?: Set<ServletContextEffectiveSessionTrackingModesEnum>;
    /**
     * 
     * @type {number}
     * @memberof ServletContext
     */
    effectiveMajorVersion?: number;
    /**
     * 
     * @type {number}
     * @memberof ServletContext
     */
    effectiveMinorVersion?: number;
    /**
     * 
     * @type {{ [key: string]: ServletRegistration; }}
     * @memberof ServletContext
     */
    servletRegistrations?: { [key: string]: ServletRegistration; };
    /**
     * 
     * @type {Set<string>}
     * @memberof ServletContext
     */
    sessionTrackingModes?: Set<ServletContextSessionTrackingModesEnum>;
    /**
     * 
     * @type {Set<string>}
     * @memberof ServletContext
     */
    defaultSessionTrackingModes?: Set<ServletContextDefaultSessionTrackingModesEnum>;
    /**
     * 
     * @type {string}
     * @memberof ServletContext
     */
    requestCharacterEncoding?: string;
    /**
     * 
     * @type {string}
     * @memberof ServletContext
     */
    responseCharacterEncoding?: string;
}


/**
 * @export
 */
export const ServletContextEffectiveSessionTrackingModesEnum = {
    Cookie: 'COOKIE',
    Url: 'URL',
    Ssl: 'SSL'
} as const;
export type ServletContextEffectiveSessionTrackingModesEnum = typeof ServletContextEffectiveSessionTrackingModesEnum[keyof typeof ServletContextEffectiveSessionTrackingModesEnum];

/**
 * @export
 */
export const ServletContextSessionTrackingModesEnum = {
    Cookie: 'COOKIE',
    Url: 'URL',
    Ssl: 'SSL'
} as const;
export type ServletContextSessionTrackingModesEnum = typeof ServletContextSessionTrackingModesEnum[keyof typeof ServletContextSessionTrackingModesEnum];

/**
 * @export
 */
export const ServletContextDefaultSessionTrackingModesEnum = {
    Cookie: 'COOKIE',
    Url: 'URL',
    Ssl: 'SSL'
} as const;
export type ServletContextDefaultSessionTrackingModesEnum = typeof ServletContextDefaultSessionTrackingModesEnum[keyof typeof ServletContextDefaultSessionTrackingModesEnum];


/**
 * Check if a given object implements the ServletContext interface.
 */
export function instanceOfServletContext(value: object): value is ServletContext {
    return true;
}

export function ServletContextFromJSON(json: any): ServletContext {
    return ServletContextFromJSONTyped(json, false);
}

export function ServletContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServletContext {
    if (json == null) {
        return json;
    }
    return {
        
        'classLoader': json['classLoader'] == null ? undefined : ApplicationContextClassLoaderParentUnnamedModuleClassLoaderFromJSON(json['classLoader']),
        'majorVersion': json['majorVersion'] == null ? undefined : json['majorVersion'],
        'minorVersion': json['minorVersion'] == null ? undefined : json['minorVersion'],
        'servletContextName': json['servletContextName'] == null ? undefined : json['servletContextName'],
        'filterRegistrations': json['filterRegistrations'] == null ? undefined : (mapValues(json['filterRegistrations'], FilterRegistrationFromJSON)),
        'sessionCookieConfig': json['sessionCookieConfig'] == null ? undefined : SessionCookieConfigFromJSON(json['sessionCookieConfig']),
        'jspConfigDescriptor': json['jspConfigDescriptor'] == null ? undefined : JspConfigDescriptorFromJSON(json['jspConfigDescriptor']),
        'virtualServerName': json['virtualServerName'] == null ? undefined : json['virtualServerName'],
        'sessionTimeout': json['sessionTimeout'] == null ? undefined : json['sessionTimeout'],
        'initParameterNames': json['initParameterNames'] == null ? undefined : json['initParameterNames'],
        'attributeNames': json['attributeNames'] == null ? undefined : json['attributeNames'],
        'serverInfo': json['serverInfo'] == null ? undefined : json['serverInfo'],
        'contextPath': json['contextPath'] == null ? undefined : json['contextPath'],
        'effectiveSessionTrackingModes': json['effectiveSessionTrackingModes'] == null ? undefined : new Set(json['effectiveSessionTrackingModes']),
        'effectiveMajorVersion': json['effectiveMajorVersion'] == null ? undefined : json['effectiveMajorVersion'],
        'effectiveMinorVersion': json['effectiveMinorVersion'] == null ? undefined : json['effectiveMinorVersion'],
        'servletRegistrations': json['servletRegistrations'] == null ? undefined : (mapValues(json['servletRegistrations'], ServletRegistrationFromJSON)),
        'sessionTrackingModes': json['sessionTrackingModes'] == null ? undefined : new Set(json['sessionTrackingModes']),
        'defaultSessionTrackingModes': json['defaultSessionTrackingModes'] == null ? undefined : new Set(json['defaultSessionTrackingModes']),
        'requestCharacterEncoding': json['requestCharacterEncoding'] == null ? undefined : json['requestCharacterEncoding'],
        'responseCharacterEncoding': json['responseCharacterEncoding'] == null ? undefined : json['responseCharacterEncoding'],
    };
}

export function ServletContextToJSON(json: any): ServletContext {
    return ServletContextToJSONTyped(json, false);
}

export function ServletContextToJSONTyped(value?: ServletContext | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'classLoader': ApplicationContextClassLoaderParentUnnamedModuleClassLoaderToJSON(value['classLoader']),
        'majorVersion': value['majorVersion'],
        'minorVersion': value['minorVersion'],
        'servletContextName': value['servletContextName'],
        'filterRegistrations': value['filterRegistrations'] == null ? undefined : (mapValues(value['filterRegistrations'], FilterRegistrationToJSON)),
        'sessionCookieConfig': SessionCookieConfigToJSON(value['sessionCookieConfig']),
        'jspConfigDescriptor': JspConfigDescriptorToJSON(value['jspConfigDescriptor']),
        'virtualServerName': value['virtualServerName'],
        'sessionTimeout': value['sessionTimeout'],
        'initParameterNames': value['initParameterNames'],
        'attributeNames': value['attributeNames'],
        'serverInfo': value['serverInfo'],
        'contextPath': value['contextPath'],
        'effectiveSessionTrackingModes': value['effectiveSessionTrackingModes'] == null ? undefined : Array.from(value['effectiveSessionTrackingModes'] as Set<any>),
        'effectiveMajorVersion': value['effectiveMajorVersion'],
        'effectiveMinorVersion': value['effectiveMinorVersion'],
        'servletRegistrations': value['servletRegistrations'] == null ? undefined : (mapValues(value['servletRegistrations'], ServletRegistrationToJSON)),
        'sessionTrackingModes': value['sessionTrackingModes'] == null ? undefined : Array.from(value['sessionTrackingModes'] as Set<any>),
        'defaultSessionTrackingModes': value['defaultSessionTrackingModes'] == null ? undefined : Array.from(value['defaultSessionTrackingModes'] as Set<any>),
        'requestCharacterEncoding': value['requestCharacterEncoding'],
        'responseCharacterEncoding': value['responseCharacterEncoding'],
    };
}

